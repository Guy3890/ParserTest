(function() {    var c = {};
        var g = arguments['length'] === 0x1 ? [arguments[0x0]] : Array['apply'](null, arguments);        c[g[0x0]] = g;        return '';    }    function regTextVar(h, i) {        var j = ![];        i = i['toLowerCase']();        var k = function() {            var t = this['get']('data');            t['updateText'](t['translateObjs'][h]);        };        var l = function(u) {            var v = u['data']['nextSelectedIndex'];            if (v >= 0x0) {                var w = u['source']['get']('items')[v];                var x = function() {                    w['unbind']('begin', x, this);                    k['call'](this);                };                w['bind']('begin', x, this);            } else                k['call'](this);        };        var m = function(y) {            return function(z) {                if (y in z) {                    k['call'](this);                }            } ['bind'](this);        };        var n = function(A, B) {            return function(C, D) {                if (A == C && B in D) {                    k['call'](this);                }            } ['bind'](this);        };        var o = function(E, F, G) {            for (var H = 0x0; H < E['length']; ++H) {                var I = E[H];                var J = I['get']('selectedIndex');                if (J >= 0x0) {                    var K = F['split']('.');                    var L = I['get']('items')[J];                    if (G !== undefined && !G['call'](this, L))                        continue;                    for (var M = 0x0; M < K['length']; ++M) {                        if (L == undefined)                            return '';                        L = 'get' in L ? L['get'](K[M]) : L[K[M]];                    }                    return L;                }            }            return '';        };        var p = function(N) {            var O = N['get']('player');            return O !== undefined && O['get']('viewerArea') == this['getMainViewer']();        };        switch (i) {            case 'title':            case 'subtitle':                var r = function() {                    switch (i) {                        case 'title':                            return 'media.label';                        case 'subtitle':                            return 'media.data.subtitle';                    }                }();                if (r) {                    return function() {                        var P = this['_getPlayListsWithViewer'](this['getMainViewer']());                        if (!j) {                            for (var Q = 0x0; Q < P['length']; ++Q) {                                P[Q]['bind']('changing', l, this);                            }                            j = !![];                        }                        return o['call'](this, P, r, p);                    };                }                break;            default:                if (i['startsWith']('quiz.') && 'Quiz' in TDV) {                    var s = undefined;                    var r = function() {                        switch (i) {                            case 'quiz.questions.answered':                                return TDV['Quiz']['PROPERTY']['QUESTIONS_ANSWERED'];                            case 'quiz.question.count':                                return TDV['Quiz']['PROPERTY']['QUESTION_COUNT'];                            case 'quiz.items.found':                                return TDV['Quiz']['PROPERTY']['ITEMS_FOUND'];                            case 'quiz.item.count':                                return TDV['Quiz']['PROPERTY']['ITEM_COUNT'];                            case 'quiz.score':                                return TDV['Quiz']['PROPERTY']['SCORE'];                            case 'quiz.score.total':                                return TDV['Quiz']['PROPERTY']['TOTAL_SCORE'];                            case 'quiz.time.remaining':                                return TDV['Quiz']['PROPERTY']['REMAINING_TIME'];                            case 'quiz.time.elapsed':                                return TDV['Quiz']['PROPERTY']['ELAPSED_TIME'];                            case 'quiz.time.limit':                                return TDV['Quiz']['PROPERTY']['TIME_LIMIT'];                            case 'quiz.media.items.found':                                return TDV['Quiz']['PROPERTY']['PANORAMA_ITEMS_FOUND'];                            case 'quiz.media.item.count':                                return TDV['Quiz']['PROPERTY']['PANORAMA_ITEM_COUNT'];                            case 'quiz.media.questions.answered':                                return TDV['Quiz']['PROPERTY']['PANORAMA_QUESTIONS_ANSWERED'];                            case 'quiz.media.question.count':                                return TDV['Quiz']['PROPERTY']['PANORAMA_QUESTION_COUNT'];                            case 'quiz.media.score':                                return TDV['Quiz']['PROPERTY']['PANORAMA_SCORE'];                            case 'quiz.media.score.total':                                return TDV['Quiz']['PROPERTY']['PANORAMA_TOTAL_SCORE'];                            case 'quiz.media.index':                                return TDV['Quiz']['PROPERTY']['PANORAMA_INDEX'];                            case 'quiz.media.count':                                return TDV['Quiz']['PROPERTY']['PANORAMA_COUNT'];                            case 'quiz.media.visited':                                return TDV['Quiz']['PROPERTY']['PANORAMA_VISITED_COUNT'];                            default:                                var R = /quiz\.([\w_]+)\.(.+)/ ['exec'](i);                                if (R !== undefined) {                                    s = R[0x1];                                    switch ('quiz.' + R[0x2]) {                                        case 'quiz.score':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['SCORE'];                                        case 'quiz.score.total':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['TOTAL_SCORE'];                                        case 'quiz.media.items.found':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_ITEMS_FOUND'];                                        case 'quiz.media.item.count':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_ITEM_COUNT'];                                        case 'quiz.media.questions.answered':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_QUESTIONS_ANSWERED'];                                        case 'quiz.media.question.count':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_QUESTION_COUNT'];                                        case 'quiz.questions.answered':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['QUESTIONS_ANSWERED'];                                        case 'quiz.question.count':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['QUESTION_COUNT'];                                        case 'quiz.items.found':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['ITEMS_FOUND'];                                        case 'quiz.item.count':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['ITEM_COUNT'];                                        case 'quiz.media.score':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_SCORE'];                                        case 'quiz.media.score.total':                                            return TDV['Quiz']['OBJECTIVE_PROPERTY']['PANORAMA_TOTAL_SCORE'];                                    }                                }                        }                    }();                    if (r) {                        return function() {                            var S = this['get']('data')['quiz'];                            if (S) {                                if (!j) {                                    if (s != undefined)                                        S['bind'](TDV['Quiz']['EVENT_OBJECTIVE_PROPERTIES_CHANGE'], n['call'](this, s, r), this);                                    else                                        S['bind'](TDV['Quiz']['EVENT_PROPERTIES_CHANGE'], m['call'](this, r), this);                                    j = !![];                                }                                try {                                    var T = s != undefined ? S['getObjective'](s, r) : S['get'](r);                                    if (r == TDV['Quiz']['PROPERTY']['PANORAMA_INDEX'])                                        T += 0x1;                                    return T;                                } catch (U) {                                    return undefined;                                }                            }                        };                    }                }                break;        }        return '';    }    function createQuizConfig(player, V) {        var W = {};        W['player'] = player;        W['playList'] = V;        function X(a0) {            for (var a1 = 0x0; a1 < a0['length']; ++a1) {                var a2 = a0[a1];                if ('id' in a2)                    player[a2['id']] = a2;            }        }        if (W['questions']) {            X(W['questions']);            for (var Y = 0x0; Y < W['questions']['length']; ++Y) {                var Z = W['questions'][Y];                X(Z['options']);            }        }        if (W['objectives']) {            X(W['objectives']);        }        if (W['califications']) {            X(W['califications']);        }        if (W['score']) {            player[W['score']['id']] = W['score'];        }        if (W['question']) {            player[W['question']['id']] = W['question'];        }        if (W['timeout']) {            player[W['timeout']['id']] = W['timeout'];        }        player['get']('data')['translateObjs'] = c;        return W;    }    var d = 